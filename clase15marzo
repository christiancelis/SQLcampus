use tiendas;

CREATE TABLE Productos (
    id INT AUTO_INCREMENT,
    nombre VARCHAR(255),
    precio DECIMAL(10, 2),
    stock INT,
    PRIMARY KEY (id)
);

CREATE TABLE Clientes (
    id INT AUTO_INCREMENT,
    nombre VARCHAR(255),
    email VARCHAR(255),
    PRIMARY KEY (id)
);

CREATE TABLE Ventas (
    id INT AUTO_INCREMENT,
    producto_id INT,
    cliente_id INT,
    cantidad INT,
    fecha_venta DATE,
    PRIMARY KEY (id),
    FOREIGN KEY (producto_id) REFERENCES Productos(id),
    FOREIGN KEY (cliente_id) REFERENCES Clientes(id)
);





DELIMITER //

CREATE PROCEDURE AñadirProducto(IN nombre VARCHAR(255), IN precio DECIMAL(10, 2), IN stock INT)
BEGIN
	declare exit handler for 1062
    select ("Error: Fabricante no Existe");
    
	
    
    
    INSERT INTO Productos(nombre, precio, stock) VALUES (nombre, precio, stock);
END //

DELIMITER ;


DELIMITER //

CREATE PROCEDURE RegistrarCliente(IN nombre VARCHAR(255), IN email VARCHAR(255))
BEGIN
    INSERT INTO Clientes(nombre, email) VALUES (nombre, email);
END //

DELIMITER ;



DELIMITER //

CREATE PROCEDURE RealizarVenta(IN productoID INT, IN clienteID INT, IN cantidad INT)
BEGIN
    -- Aquí podrías añadir lógica para actualizar el stock, verificar disponibilidad, etc.
    INSERT INTO Ventas(producto_id, cliente_id, cantidad, fecha_venta) VALUES (productoID, clienteID, cantidad, CURDATE());
END //
DELIMITER ;

create table errores_log(
	codigo_id_error int primary key auto_increment,
    codigo_error int ,
    fecha_error date, 
    hora_error time,
    descripcion varchar(200)
);




DELIMITER //
create procedure GuardarError(in codigo int ,in fecha date,in hora time ,in descripcion varchar(200))
begin
	insert into errores_log values(codigo,fecha, hora,descripcion)
end;
DELIMITER ;


CALL AñadirProducto('Producto 1', 10.99, 50);
CALL AñadirProducto('Producto 2', 15.49, 30);
CALL AñadirProducto('Producto 3', 8.99, 20);
CALL AñadirProducto('Producto 4', 20.99, 40);
CALL AñadirProducto('Producto 5', 12.99, 60);

CALL RegistrarCliente('Cliente 1', 'cliente1@example.com');
CALL RegistrarCliente('Cliente 2', 'cliente2@example.com');
CALL RegistrarCliente('Cliente 3', 'cliente3@example.com');
CALL RegistrarCliente('Cliente 4', 'cliente4@example.com');
CALL RegistrarCliente('Cliente 5', 'cliente5@example.com');

CALL RealizarVenta(1, 1, 2); -- Venta del Producto 1 al Cliente 1 con cantidad 2
CALL RealizarVenta(2, 2, 1); -- Venta del Producto 2 al Cliente 2 con cantidad 1
CALL RealizarVenta(3, 3, 3); -- Venta del Producto 3 al Cliente 3 con cantidad 3
CALL RealizarVenta(4, 4, 2); -- Venta del Producto 4 al Cliente 4 con cantidad 2
CALL RealizarVenta(5, 5, 1); -- Venta del Producto 5 al Cliente 5 con cantidad 1
CALL RealizarVenta(1, 2, 1); -- Venta del Producto 1 al Cliente 2 con cantidad 1
CALL RealizarVenta(2, 3, 2); -- Venta del Producto 2 al Cliente 3 con cantidad 2
CALL RealizarVenta(3, 4, 1); -- Venta del Producto 3 al Cliente 4 con cantidad 1
CALL RealizarVenta(4, 5, 3); -- Venta del Producto 4 al Cliente 5 con cantidad 3
CALL RealizarVenta(5, 1, 2); -- Venta del Producto 5 al Cliente 1 con cantidad 2

use Hospital;

drop procedure pDepartamento;
 
delimiter $$
	create procedure pDepartamento(in nombreDep varchar(50))
    begin
		select dt.Dept_No ,  dt.DNombre , count(ep.Emp_No)
        from Emp as ep
        inner join Dept as dt  on dt.Dept_No = ep.Dept_No
        where Upper(dt.DNombre) = upper(nombreDep)
        group by dt.Dept_No;
    end $$
delimiter ;

call pDepartamento("VENTAS");



drop procedure pDepartamento;

delimiter $$
	create procedure pDepartamento(in nombreDep varchar(50))
    begin
		select AVG(ep.Salario) as Media , count(ep.Emp_No) as NUmeroEmpleados, sum(ep.Salario)
        from Emp as ep
        inner join Dept as dt  on dt.Dept_No = ep.Dept_No
        where upper(dt.DNombre) = upper(nombreDep);
        
        select ep.Emp_No , ep.Apellido , ep.Salario
		from Emp as ep
		inner join Dept as dt  on dt.Dept_No = ep.Dept_No
        where upper(dt.DNombre) = upper(nombreDep);
    end $$
delimiter ;


call pDepartamento("VENTAS")


delimiter $$
	create procedure pJefeySubordinados(in Apellido varchar(50))
    begin
		select emp.
        from Emp as ep
        where upper(ep.Apellido) = upper(Apellido) and Dir;
        
    end $$
delimiter ;



-- funciones 

/*
create funcion nombref(parametro)
returns tipo_retorno
begin
	return variable
end
*/

use pruebas;

delimiter $$
create function calcularAreaCirculo(radio double)
returns double deterministic
begin
	declare area double;
    set area = pi() * radio * radio;
    return area;
end $$

delimiter ;





-- funcion que me devuelva la clasificacion de una pélicula segun su edad


delimiter $$ 
create function clasificarPelicula(edad int)
returns varchar(30) deterministic
begin
	 if edad < 13 then
		return "Para Niños";
	elseif edad <18 then
		return "Para Adolecentes";
	else
		return "Para Adultos";
    end if;
end $$

delimiter ;


select clasificarPelicula(12);
